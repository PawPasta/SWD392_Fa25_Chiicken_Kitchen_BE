package com.ChickenKitchen.app.initializer


import org.springframework.boot.CommandLineRunner
import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration
import org.springframework.security.crypto.password.PasswordEncoder
import com.ChickenKitchen.app.model.entity.user.User
import com.ChickenKitchen.app.model.entity.user.UserAddress
import com.ChickenKitchen.app.model.entity.user.Wallet
import com.ChickenKitchen.app.model.entity.ingredient.Nutrient
import com.ChickenKitchen.app.model.entity.ingredient.Ingredient
import com.ChickenKitchen.app.model.entity.ingredient.IngredientNutrient
import com.ChickenKitchen.app.model.entity.cooking.CookingMethod
import com.ChickenKitchen.app.model.entity.cooking.CookingEffect
import com.ChickenKitchen.app.model.entity.recipe.Recipe
import com.ChickenKitchen.app.model.entity.recipe.RecipeIngredient
import com.ChickenKitchen.app.repository.user.UserRepository
import com.ChickenKitchen.app.repository.user.UserAddressRepository
import com.ChickenKitchen.app.repository.user.WalletRepository
import com.ChickenKitchen.app.repository.ingredient.NutrientRepository
import com.ChickenKitchen.app.repository.ingredient.IngredientRepository
import com.ChickenKitchen.app.repository.ingredient.IngredientNutrientRepository
import com.ChickenKitchen.app.repository.cooking.CookingMethodRepository
import com.ChickenKitchen.app.repository.cooking.CookingEffectRepository
import com.ChickenKitchen.app.repository.recipe.RecipeRepository
import com.ChickenKitchen.app.enum.Role
import com.ChickenKitchen.app.enum.UnitEnum
import com.ChickenKitchen.app.enum.IngredientCategory
import com.ChickenKitchen.app.enum.EffectType
import com.ChickenKitchen.app.enum.RecipeCategory
import java.time.LocalDate
import java.math.BigDecimal

@Configuration
class DataInitializer {

    @Bean
    fun initData(
        userRepository: UserRepository,
        userAddressRepository: UserAddressRepository,
        walletRepository: WalletRepository,
        nutrientRepository: NutrientRepository,
        ingredientRepository: IngredientRepository,
        ingredientNutrientRepository: IngredientNutrientRepository,
        cookingMethodRepository: CookingMethodRepository,
        cookingEffectRepository: CookingEffectRepository,
        // recipeRepository: RecipeRepository,
        passwordEncoder: PasswordEncoder
    ) = CommandLineRunner {

        println("‚è≥ Checking existing data...")

        // ====== ADMIN ======

        if (!userRepository.existsByUsername("admin")) {
            val admin = User(
                username = "admin",
                email = "admin@example.com",
                password = passwordEncoder.encode("123456"),
                role = Role.ADMIN,
                isVerify = true,
                firstName = "System",
                lastName = "Admin",
                birthday = LocalDate.of(1990, 1, 1)
            )
            userRepository.save(admin)

            val adminAddress = UserAddress(
                recipientName = "Admin Example",
                phone = "0123456789",
                addressLine = "123 Main St",
                city = "Hanoi",
                isDefault = true,
                user = admin
            )
            userAddressRepository.save(adminAddress)

            admin.wallet = Wallet(
                balance = BigDecimal(1_000_000),
                user = admin
            )
            walletRepository.save(admin.wallet!!)
            println("üë§ Admin user created")
        }

        // ====== SAMPLE USERS ======

        if (userRepository.count() < 2L) {
            val sampleUsers = listOf(
                Triple("user1", Role.USER, "User One"),
                Triple("user2", Role.USER, "User Two"),
                Triple("user3", Role.USER, "User Three"),
                Triple("user4", Role.USER, "User Four"),
                Triple("user5", Role.USER, "User Five"),
                Triple("user6", Role.USER, "User Six"),
                Triple("employee1", Role.EMPLOYEE, "Emp One"),
                Triple("employee2", Role.EMPLOYEE, "Emp Two"),
                Triple("employee3", Role.EMPLOYEE, "Emp Three"),
                Triple("employee4", Role.EMPLOYEE, "Emp Four")
            )
    
            sampleUsers.forEach { (username, role, fullname) ->
                if (!userRepository.existsByUsername(username)) {
                    val (firstName, lastName) = fullname.split(" ", limit = 2)
    
                    val user = User(
                        username = username,
                        email = "$username@example.com",
                        password = passwordEncoder.encode("123456"),
                        role = role,
                        isVerify = true,
                        firstName = firstName,
                        lastName = lastName,
                        birthday = LocalDate.of(1995, 5, 15)
                    )
                    userRepository.save(user)
    
                    val address = UserAddress(
                        recipientName = fullname,
                        phone = "0987654321",
                        addressLine = "456 Example St",
                        city = "HCM",
                        isDefault = true,
                        user = user
                    )
                    userAddressRepository.save(address)
    
                    user.wallet = Wallet(
                        balance = BigDecimal(500_000),
                        user = user
                    )
                    walletRepository.save(user.wallet!!)
    
                    println("üë§ Sample user created: $username ($role)")
                }
            }
    
            println("‚úÖ Inserted 10 sample users")    
        }

        
        // ===== NUTRIENTS =====

        if (nutrientRepository.count() < 1L) {
            val nutrients = listOf(
                Nutrient(name = "Calories", baseUnit = UnitEnum.G),
                Nutrient(name = "Protein", baseUnit = UnitEnum.G),
                Nutrient(name = "Carbohydrate", baseUnit = UnitEnum.G),
                Nutrient(name = "Fat", baseUnit = UnitEnum.G),
                Nutrient(name = "Fiber", baseUnit = UnitEnum.G),
                Nutrient(name = "Sugar", baseUnit = UnitEnum.G),
                Nutrient(name = "Sodium", baseUnit = UnitEnum.MG),
                Nutrient(name = "Potassium", baseUnit = UnitEnum.MG),
                Nutrient(name = "Calcium", baseUnit = UnitEnum.MG),
                Nutrient(name = "Iron", baseUnit = UnitEnum.MG),
                Nutrient(name = "Vitamin A", baseUnit = UnitEnum.MG),
                Nutrient(name = "Vitamin B1", baseUnit = UnitEnum.MG),
                Nutrient(name = "Vitamin B2", baseUnit = UnitEnum.MG),
                Nutrient(name = "Vitamin B6", baseUnit = UnitEnum.MG),
                Nutrient(name = "Vitamin B12", baseUnit = UnitEnum.MG),
                Nutrient(name = "Vitamin C", baseUnit = UnitEnum.MG),
                Nutrient(name = "Vitamin D", baseUnit = UnitEnum.MG),
                Nutrient(name = "Vitamin E", baseUnit = UnitEnum.MG),
                Nutrient(name = "Vitamin K", baseUnit = UnitEnum.MG),
                Nutrient(name = "Magnesium", baseUnit = UnitEnum.MG),
                Nutrient(name = "Zinc", baseUnit = UnitEnum.MG),
                Nutrient(name = "Cholesterol", baseUnit = UnitEnum.MG),
            )
            val savedNutrients = nutrientRepository.saveAll(nutrients)
            val nutMap = savedNutrients.associateBy { it.name }
            println("‚úÖ Inserted ${savedNutrients.size} nutrients")


            // ===== INGREDIENTS =====

            if (ingredientRepository.count() < 1L) {
                val ingredients = listOf(
                    // === VEGETABLE ===
                    Ingredient(name = "C√† chua",  category = IngredientCategory.VEGETABLE, baseUnit = UnitEnum.G, baseQuantity = 100, basePrice = BigDecimal("5000")),
                    Ingredient(name = "D∆∞a leo",  category = IngredientCategory.VEGETABLE, baseUnit = UnitEnum.G, baseQuantity = 100, basePrice = BigDecimal("4000")),
                    Ingredient(name = "Rau mu·ªëng",category = IngredientCategory.VEGETABLE, baseUnit = UnitEnum.G, baseQuantity = 100, basePrice = BigDecimal("3000")),
                    Ingredient(name = "Khoai t√¢y",category = IngredientCategory.VEGETABLE, baseUnit = UnitEnum.G, baseQuantity = 100, basePrice = BigDecimal("6000")),
                    Ingredient(name = "C√† r·ªët",   category = IngredientCategory.VEGETABLE, baseUnit = UnitEnum.G, baseQuantity = 100, basePrice = BigDecimal("7000")),
        
                    // === MEAT ===
                    Ingredient(name = "Th·ªãt g√†",  category = IngredientCategory.MEAT, baseUnit = UnitEnum.G, baseQuantity = 100, basePrice = BigDecimal("25000")),
                    Ingredient(name = "Th·ªãt b√≤",  category = IngredientCategory.MEAT, baseUnit = UnitEnum.G, baseQuantity = 100, basePrice = BigDecimal("40000")),
                    Ingredient(name = "Th·ªãt heo", category = IngredientCategory.MEAT, baseUnit = UnitEnum.G, baseQuantity = 100, basePrice = BigDecimal("20000")),
                    Ingredient(name = "Th·ªãt v·ªãt", category = IngredientCategory.MEAT, baseUnit = UnitEnum.G, baseQuantity = 100, basePrice = BigDecimal("22000")),
                    Ingredient(name = "Th·ªãt d√™",  category = IngredientCategory.MEAT, baseUnit = UnitEnum.G, baseQuantity = 100, basePrice = BigDecimal("35000")),
        
                    // === SEAFOOD ===
                    Ingredient(name = "C√° h·ªìi",   category = IngredientCategory.SEAFOOD, baseUnit = UnitEnum.G, baseQuantity = 100, basePrice = BigDecimal("60000")),
                    Ingredient(name = "C√° thu",   category = IngredientCategory.SEAFOOD, baseUnit = UnitEnum.G, baseQuantity = 100, basePrice = BigDecimal("30000")),
                    Ingredient(name = "T√¥m s√∫",   category = IngredientCategory.SEAFOOD, baseUnit = UnitEnum.G, baseQuantity = 100, basePrice = BigDecimal("45000")),
                    Ingredient(name = "M·ª±c ·ªëng",  category = IngredientCategory.SEAFOOD, baseUnit = UnitEnum.G, baseQuantity = 100, basePrice = BigDecimal("38000")),
                    Ingredient(name = "Gh·∫π bi·ªÉn", category = IngredientCategory.SEAFOOD, baseUnit = UnitEnum.G, baseQuantity = 100, basePrice = BigDecimal("50000")),
        
                    // === GRAIN ===
                    Ingredient(name = "C∆°m tr·∫Øng", category = IngredientCategory.GRAIN, baseUnit = UnitEnum.G, baseQuantity = 100, basePrice = BigDecimal("12000")),
                    Ingredient(name = "C∆°m g·∫°o l·ª©t",   category = IngredientCategory.GRAIN, baseUnit = UnitEnum.G, baseQuantity = 100, basePrice = BigDecimal("18000")),
                    Ingredient(name = "B√∫n t∆∞∆°i",  category = IngredientCategory.GRAIN, baseUnit = UnitEnum.G, baseQuantity = 100, basePrice = BigDecimal("15000")),
                    Ingredient(name = "M√¨ tr·ª©ng",  category = IngredientCategory.GRAIN, baseUnit = UnitEnum.G, baseQuantity = 100, basePrice = BigDecimal("20000")),
                    Ingredient(name = "B√°nh m√¨",   category = IngredientCategory.GRAIN, baseUnit = UnitEnum.G, baseQuantity = 100, basePrice = BigDecimal("10000"))
                )
                val savedIngredients = ingredientRepository.saveAll(ingredients)
                val ingMap = savedIngredients.associateBy { it.name }
                println("‚úÖ Inserted ${savedIngredients.size} ingredients")

                    // ===== INGREDIENT_NUTRIENTS =====

                if (ingredientNutrientRepository.count() < 1L) {
                    val ingredientNutrients = listOf(
                        // C√† chua
                        IngredientNutrient(ingredient = ingMap["C√† chua"]!!, nutrient = nutMap["Calories"]!!, amount = BigDecimal("18.0")),
                        IngredientNutrient(ingredient = ingMap["C√† chua"]!!, nutrient = nutMap["Vitamin C"]!!, amount = BigDecimal("14.0")),
                        IngredientNutrient(ingredient = ingMap["C√† chua"]!!, nutrient = nutMap["Carbohydrate"]!!, amount = BigDecimal("3.9")),
                        IngredientNutrient(ingredient = ingMap["C√† chua"]!!, nutrient = nutMap["Fiber"]!!, amount = BigDecimal("1.2")),
                        IngredientNutrient(ingredient = ingMap["C√† chua"]!!, nutrient = nutMap["Sugar"]!!, amount = BigDecimal("2.6")),
                        IngredientNutrient(ingredient = ingMap["C√† chua"]!!, nutrient = nutMap["Potassium"]!!, amount = BigDecimal("237.0")),
    
                        // D∆∞a leo
                        IngredientNutrient(ingredient = ingMap["D∆∞a leo"]!!, nutrient = nutMap["Calories"]!!, amount = BigDecimal("15.0")),
                        IngredientNutrient(ingredient = ingMap["D∆∞a leo"]!!, nutrient = nutMap["Vitamin K"]!!, amount = BigDecimal("16.4")),
                        IngredientNutrient(ingredient = ingMap["D∆∞a leo"]!!, nutrient = nutMap["Fiber"]!!, amount = BigDecimal("0.5")),
                        IngredientNutrient(ingredient = ingMap["D∆∞a leo"]!!, nutrient = nutMap["Potassium"]!!, amount = BigDecimal("147.0")),
                        IngredientNutrient(ingredient = ingMap["D∆∞a leo"]!!, nutrient = nutMap["Vitamin C"]!!, amount = BigDecimal("3.0")),
    
                        // Rau mu·ªëng
                        IngredientNutrient(ingredient = ingMap["Rau mu·ªëng"]!!, nutrient = nutMap["Calories"]!!, amount = BigDecimal("19.0")),
                        IngredientNutrient(ingredient = ingMap["Rau mu·ªëng"]!!, nutrient = nutMap["Iron"]!!, amount = BigDecimal("1.6")),
                        IngredientNutrient(ingredient = ingMap["Rau mu·ªëng"]!!, nutrient = nutMap["Vitamin A"]!!, amount = BigDecimal("315.0")),
                        IngredientNutrient(ingredient = ingMap["Rau mu·ªëng"]!!, nutrient = nutMap["Calcium"]!!, amount = BigDecimal("77.0")),
                        IngredientNutrient(ingredient = ingMap["Rau mu·ªëng"]!!, nutrient = nutMap["Magnesium"]!!, amount = BigDecimal("71.0")),
                        IngredientNutrient(ingredient = ingMap["Rau mu·ªëng"]!!, nutrient = nutMap["Vitamin C"]!!, amount = BigDecimal("55.0")),
    
                        // Khoai t√¢y
                        IngredientNutrient(ingredient = ingMap["Khoai t√¢y"]!!, nutrient = nutMap["Calories"]!!, amount = BigDecimal("77.0")),
                        IngredientNutrient(ingredient = ingMap["Khoai t√¢y"]!!, nutrient = nutMap["Carbohydrate"]!!, amount = BigDecimal("17.0")),
                        IngredientNutrient(ingredient = ingMap["Khoai t√¢y"]!!, nutrient = nutMap["Potassium"]!!, amount = BigDecimal("429.0")),
                        IngredientNutrient(ingredient = ingMap["Khoai t√¢y"]!!, nutrient = nutMap["Fiber"]!!, amount = BigDecimal("2.2")),
                        IngredientNutrient(ingredient = ingMap["Khoai t√¢y"]!!, nutrient = nutMap["Vitamin C"]!!, amount = BigDecimal("19.7")),
                        IngredientNutrient(ingredient = ingMap["Khoai t√¢y"]!!, nutrient = nutMap["Magnesium"]!!, amount = BigDecimal("23.0")),
    
                        // C√† r·ªët
                        IngredientNutrient(ingredient = ingMap["C√† r·ªët"]!!, nutrient = nutMap["Calories"]!!, amount = BigDecimal("41.0")),
                        IngredientNutrient(ingredient = ingMap["C√† r·ªët"]!!, nutrient = nutMap["Vitamin A"]!!, amount = BigDecimal("835.0")),
                        IngredientNutrient(ingredient = ingMap["C√† r·ªët"]!!, nutrient = nutMap["Fiber"]!!, amount = BigDecimal("2.8")),
                        IngredientNutrient(ingredient = ingMap["C√† r·ªët"]!!, nutrient = nutMap["Sugar"]!!, amount = BigDecimal("4.7")),
                        IngredientNutrient(ingredient = ingMap["C√† r·ªët"]!!, nutrient = nutMap["Potassium"]!!, amount = BigDecimal("320.0")),
                        IngredientNutrient(ingredient = ingMap["C√† r·ªët"]!!, nutrient = nutMap["Vitamin K"]!!, amount = BigDecimal("13.0")),
    
                        // Th·ªãt g√†
                        IngredientNutrient(ingredient = ingMap["Th·ªãt g√†"]!!, nutrient = nutMap["Calories"]!!, amount = BigDecimal("239.0")),
                        IngredientNutrient(ingredient = ingMap["Th·ªãt g√†"]!!, nutrient = nutMap["Protein"]!!, amount = BigDecimal("27.0")),
                        IngredientNutrient(ingredient = ingMap["Th·ªãt g√†"]!!, nutrient = nutMap["Fat"]!!, amount = BigDecimal("14.0")),
                        IngredientNutrient(ingredient = ingMap["Th·ªãt g√†"]!!, nutrient = nutMap["Sodium"]!!, amount = BigDecimal("70.0")),
                        IngredientNutrient(ingredient = ingMap["Th·ªãt g√†"]!!, nutrient = nutMap["Cholesterol"]!!, amount = BigDecimal("85.0")),
                        IngredientNutrient(ingredient = ingMap["Th·ªãt g√†"]!!, nutrient = nutMap["Vitamin B6"]!!, amount = BigDecimal("0.5")),
    
                        // Th·ªãt b√≤
                        IngredientNutrient(ingredient = ingMap["Th·ªãt b√≤"]!!, nutrient = nutMap["Calories"]!!, amount = BigDecimal("250.0")),
                        IngredientNutrient(ingredient = ingMap["Th·ªãt b√≤"]!!, nutrient = nutMap["Protein"]!!, amount = BigDecimal("26.0")),
                        IngredientNutrient(ingredient = ingMap["Th·ªãt b√≤"]!!, nutrient = nutMap["Iron"]!!, amount = BigDecimal("2.6")),
                        IngredientNutrient(ingredient = ingMap["Th·ªãt b√≤"]!!, nutrient = nutMap["Sodium"]!!, amount = BigDecimal("72.0")),
                        IngredientNutrient(ingredient = ingMap["Th·ªãt b√≤"]!!, nutrient = nutMap["Zinc"]!!, amount = BigDecimal("4.8")),
                        IngredientNutrient(ingredient = ingMap["Th·ªãt b√≤"]!!, nutrient = nutMap["Vitamin B12"]!!, amount = BigDecimal("2.6")),
    
                        // Th·ªãt heo
                        IngredientNutrient(ingredient = ingMap["Th·ªãt heo"]!!, nutrient = nutMap["Calories"]!!, amount = BigDecimal("242.0")),
                        IngredientNutrient(ingredient = ingMap["Th·ªãt heo"]!!, nutrient = nutMap["Protein"]!!, amount = BigDecimal("27.0")),
                        IngredientNutrient(ingredient = ingMap["Th·ªãt heo"]!!, nutrient = nutMap["Fat"]!!, amount = BigDecimal("14.0")),
                        IngredientNutrient(ingredient = ingMap["Th·ªãt heo"]!!, nutrient = nutMap["Sodium"]!!, amount = BigDecimal("62.0")),
                        IngredientNutrient(ingredient = ingMap["Th·ªãt heo"]!!, nutrient = nutMap["Magnesium"]!!, amount = BigDecimal("20.0")),
                        IngredientNutrient(ingredient = ingMap["Th·ªãt heo"]!!, nutrient = nutMap["Vitamin B1"]!!, amount = BigDecimal("0.7")),
    
                        // Th·ªãt v·ªãt
                        IngredientNutrient(ingredient = ingMap["Th·ªãt v·ªãt"]!!, nutrient = nutMap["Calories"]!!, amount = BigDecimal("337.0")),
                        IngredientNutrient(ingredient = ingMap["Th·ªãt v·ªãt"]!!, nutrient = nutMap["Protein"]!!, amount = BigDecimal("19.0")),
                        IngredientNutrient(ingredient = ingMap["Th·ªãt v·ªãt"]!!, nutrient = nutMap["Fat"]!!, amount = BigDecimal("28.0")),
    
                        // === Th·ªãt d√™ ===
                        IngredientNutrient(ingredient = ingMap["Th·ªãt d√™"]!!, nutrient = nutMap["Calories"]!!, amount = BigDecimal("143.0")),
                        IngredientNutrient(ingredient = ingMap["Th·ªãt d√™"]!!, nutrient = nutMap["Protein"]!!, amount = BigDecimal("27.0")),
                        IngredientNutrient(ingredient = ingMap["Th·ªãt d√™"]!!, nutrient = nutMap["Iron"]!!, amount = BigDecimal("3.7")),
                        
                        // C√° h·ªìi
                        IngredientNutrient(ingredient = ingMap["C√° h·ªìi"]!!, nutrient = nutMap["Calories"]!!, amount = BigDecimal("208.0")),
                        IngredientNutrient(ingredient = ingMap["C√° h·ªìi"]!!, nutrient = nutMap["Protein"]!!, amount = BigDecimal("20.0")),
                        IngredientNutrient(ingredient = ingMap["C√° h·ªìi"]!!, nutrient = nutMap["Cholesterol"]!!, amount = BigDecimal("55.0")),
                        IngredientNutrient(ingredient = ingMap["C√° h·ªìi"]!!, nutrient = nutMap["Vitamin D"]!!, amount = BigDecimal("10.9")),
                        IngredientNutrient(ingredient = ingMap["C√° h·ªìi"]!!, nutrient = nutMap["Vitamin B12"]!!, amount = BigDecimal("3.2")),
                        IngredientNutrient(ingredient = ingMap["C√° h·ªìi"]!!, nutrient = nutMap["Sodium"]!!, amount = BigDecimal("59.0")),
    
                        // C√° thu
                        IngredientNutrient(ingredient = ingMap["C√° thu"]!!, nutrient = nutMap["Calories"]!!, amount = BigDecimal("205.0")),
                        IngredientNutrient(ingredient = ingMap["C√° thu"]!!, nutrient = nutMap["Protein"]!!, amount = BigDecimal("19.0")),
                        IngredientNutrient(ingredient = ingMap["C√° thu"]!!, nutrient = nutMap["Fat"]!!, amount = BigDecimal("13.0")),
                        IngredientNutrient(ingredient = ingMap["C√° thu"]!!, nutrient = nutMap["Vitamin D"]!!, amount = BigDecimal("16.1")),
                        IngredientNutrient(ingredient = ingMap["C√° thu"]!!, nutrient = nutMap["Vitamin B6"]!!, amount = BigDecimal("0.7")),
                        IngredientNutrient(ingredient = ingMap["C√° thu"]!!, nutrient = nutMap["Cholesterol"]!!, amount = BigDecimal("70.0")),
    
                        // T√¥m s√∫
                        IngredientNutrient(ingredient = ingMap["T√¥m s√∫"]!!, nutrient = nutMap["Calories"]!!, amount = BigDecimal("99.0")),
                        IngredientNutrient(ingredient = ingMap["T√¥m s√∫"]!!, nutrient = nutMap["Protein"]!!, amount = BigDecimal("24.0")),
                        IngredientNutrient(ingredient = ingMap["T√¥m s√∫"]!!, nutrient = nutMap["Cholesterol"]!!, amount = BigDecimal("189.0")),
                        IngredientNutrient(ingredient = ingMap["T√¥m s√∫"]!!, nutrient = nutMap["Sodium"]!!, amount = BigDecimal("111.0")),
                        IngredientNutrient(ingredient = ingMap["T√¥m s√∫"]!!, nutrient = nutMap["Vitamin B12"]!!, amount = BigDecimal("1.1")),
                        IngredientNutrient(ingredient = ingMap["T√¥m s√∫"]!!, nutrient = nutMap["Zinc"]!!, amount = BigDecimal("1.3")),
    
                        // M·ª±c ·ªëng
                        IngredientNutrient(ingredient = ingMap["M·ª±c ·ªëng"]!!, nutrient = nutMap["Calories"]!!, amount = BigDecimal("92.0")),
                        IngredientNutrient(ingredient = ingMap["M·ª±c ·ªëng"]!!, nutrient = nutMap["Protein"]!!, amount = BigDecimal("15.0")),
                        IngredientNutrient(ingredient = ingMap["M·ª±c ·ªëng"]!!, nutrient = nutMap["Cholesterol"]!!, amount = BigDecimal("233.0")),
                        IngredientNutrient(ingredient = ingMap["M·ª±c ·ªëng"]!!, nutrient = nutMap["Sodium"]!!, amount = BigDecimal("44.0")),
                        IngredientNutrient(ingredient = ingMap["M·ª±c ·ªëng"]!!, nutrient = nutMap["Vitamin B2"]!!, amount = BigDecimal("0.5")),
                        IngredientNutrient(ingredient = ingMap["M·ª±c ·ªëng"]!!, nutrient = nutMap["Zinc"]!!, amount = BigDecimal("1.5")),
    
                        // Gh·∫π bi·ªÉn
                        IngredientNutrient(ingredient = ingMap["Gh·∫π bi·ªÉn"]!!, nutrient = nutMap["Calories"]!!, amount = BigDecimal("97.0")),
                        IngredientNutrient(ingredient = ingMap["Gh·∫π bi·ªÉn"]!!, nutrient = nutMap["Protein"]!!, amount = BigDecimal("21.0")),
                        IngredientNutrient(ingredient = ingMap["Gh·∫π bi·ªÉn"]!!, nutrient = nutMap["Zinc"]!!, amount = BigDecimal("7.6")),
    
                        // C∆°m tr·∫Øng
                        IngredientNutrient(ingredient = ingMap["C∆°m tr·∫Øng"]!!, nutrient = nutMap["Calories"]!!, amount = BigDecimal("130.0")),
                        IngredientNutrient(ingredient = ingMap["C∆°m tr·∫Øng"]!!, nutrient = nutMap["Carbohydrate"]!!, amount = BigDecimal("28.0")),
                        IngredientNutrient(ingredient = ingMap["C∆°m tr·∫Øng"]!!, nutrient = nutMap["Protein"]!!, amount = BigDecimal("2.7")),
                        IngredientNutrient(ingredient = ingMap["C∆°m tr·∫Øng"]!!, nutrient = nutMap["Fat"]!!, amount = BigDecimal("0.3")),
                        IngredientNutrient(ingredient = ingMap["C∆°m tr·∫Øng"]!!, nutrient = nutMap["Fiber"]!!, amount = BigDecimal("0.4")),
    
                        // C∆°m g·∫°o l·ª©t
                        IngredientNutrient(ingredient = ingMap["C∆°m g·∫°o l·ª©t"]!!, nutrient = nutMap["Calories"]!!, amount = BigDecimal("111.0")),
                        IngredientNutrient(ingredient = ingMap["C∆°m g·∫°o l·ª©t"]!!, nutrient = nutMap["Carbohydrate"]!!, amount = BigDecimal("23.0")),
                        IngredientNutrient(ingredient = ingMap["C∆°m g·∫°o l·ª©t"]!!, nutrient = nutMap["Protein"]!!, amount = BigDecimal("2.6")),
                        IngredientNutrient(ingredient = ingMap["C∆°m g·∫°o l·ª©t"]!!, nutrient = nutMap["Fat"]!!, amount = BigDecimal("0.9")),
                        IngredientNutrient(ingredient = ingMap["C∆°m g·∫°o l·ª©t"]!!, nutrient = nutMap["Fiber"]!!, amount = BigDecimal("1.8")),
    
                        // === B√∫n t∆∞∆°i ===
                        IngredientNutrient(ingredient = ingMap["B√∫n t∆∞∆°i"]!!, nutrient = nutMap["Calories"]!!, amount = BigDecimal("109.0")),
                        IngredientNutrient(ingredient = ingMap["B√∫n t∆∞∆°i"]!!, nutrient = nutMap["Carbohydrate"]!!, amount = BigDecimal("25.0")),
                        IngredientNutrient(ingredient = ingMap["B√∫n t∆∞∆°i"]!!, nutrient = nutMap["Protein"]!!, amount = BigDecimal("2.0")),
    
                        // M√¨ tr·ª©ng
                        IngredientNutrient(ingredient = ingMap["M√¨ tr·ª©ng"]!!, nutrient = nutMap["Calories"]!!, amount = BigDecimal("138.0")),
                        IngredientNutrient(ingredient = ingMap["M√¨ tr·ª©ng"]!!, nutrient = nutMap["Carbohydrate"]!!, amount = BigDecimal("25.0")),
                        IngredientNutrient(ingredient = ingMap["M√¨ tr·ª©ng"]!!, nutrient = nutMap["Protein"]!!, amount = BigDecimal("4.5")),
                        IngredientNutrient(ingredient = ingMap["M√¨ tr·ª©ng"]!!, nutrient = nutMap["Fat"]!!, amount = BigDecimal("4.0")),
                        IngredientNutrient(ingredient = ingMap["M√¨ tr·ª©ng"]!!, nutrient = nutMap["Sodium"]!!, amount = BigDecimal("140.0")),
                        IngredientNutrient(ingredient = ingMap["M√¨ tr·ª©ng"]!!, nutrient = nutMap["Vitamin B2"]!!, amount = BigDecimal("0.3")),
    
                        // === B√°nh m√¨ ===
                        IngredientNutrient(ingredient = ingMap["B√°nh m√¨"]!!, nutrient = nutMap["Calories"]!!, amount = BigDecimal("265.0")),
                        IngredientNutrient(ingredient = ingMap["B√°nh m√¨"]!!, nutrient = nutMap["Carbohydrate"]!!, amount = BigDecimal("49.0")),
                        IngredientNutrient(ingredient = ingMap["B√°nh m√¨"]!!, nutrient = nutMap["Protein"]!!, amount = BigDecimal("9.0")),
                        IngredientNutrient(ingredient = ingMap["B√°nh m√¨"]!!, nutrient = nutMap["Fiber"]!!, amount = BigDecimal("2.7"))
                    )
    
                    ingredientNutrientRepository.saveAll(ingredientNutrients)
                    println("‚úÖ Inserted ${ingredientNutrients.size} ingredient_nutrients")
                }

            }



        }
        

        if (cookingMethodRepository.count() < 1L) {
            // ===== COOKING METHODS ======
            val cookingMethods = listOf(
                CookingMethod(
                    name = "Lu·ªôc",
                    note = "Gi·ªØ l·∫°i nhi·ªÅu vitamin nh∆∞ng c√≥ th·ªÉ l√†m m·∫•t kho√°ng ch·∫•t tan trong n∆∞·ªõc.",
                    basePrice = BigDecimal("1000.00")
                ),
                CookingMethod(
                    name = "Chi√™n",
                    note = "TƒÉng h∆∞∆°ng v·ªã, nh∆∞ng th∆∞·ªùng l√†m tƒÉng ch·∫•t b√©o v√† calo.",
                    basePrice = BigDecimal("3000.00")
                ),
                CookingMethod(
                    name = "N∆∞·ªõng",
                    note = "Gi·∫£m ch·∫•t b√©o do m·ª° ch·∫£y ra ngo√†i, gi·ªØ ƒë∆∞·ª£c h∆∞∆°ng v·ªã ƒë·∫∑c tr∆∞ng.",
                    basePrice = BigDecimal("4000.00")
                ),
                CookingMethod(
                    name = "H·∫•p",
                    note = "Gi·ªØ ƒë∆∞·ª£c nhi·ªÅu vitamin, kh√¥ng c·∫ßn th√™m d·∫ßu m·ª°.",
                    basePrice = BigDecimal("2000.00")
                ),
                CookingMethod(
                    name = "X√†o",
                    note = "N·∫•u nhanh v·ªõi √≠t d·∫ßu, gi·ªØ m√†u s·∫Øc v√† ƒë·ªô gi√≤n c·ªßa rau c·ªß.",
                    basePrice = BigDecimal("2500.00")
                ),
                CookingMethod(
                    name = "Kho",
                    note = "Th∆∞·ªùng d√πng n∆∞·ªõc m·∫Øm, ƒë∆∞·ªùng v√† gia v·ªã ƒë·ªÉ t·∫°o v·ªã ƒë·∫≠m ƒë√†.",
                    basePrice = BigDecimal("2200.00")
                ),
                CookingMethod(
                    name = "H·∫ßm",
                    note = "N·∫•u l√¢u ·ªü l·ª≠a nh·ªè, l√†m m·ªÅm th·ªãt v√† gi·∫£i ph√≥ng ch·∫•t dinh d∆∞·ª°ng trong x∆∞∆°ng.",
                    basePrice = BigDecimal("5000.00")
                ),
                CookingMethod(
                    name = "Ninh",
                    note = "T∆∞∆°ng t·ª± h·∫ßm nh∆∞ng ch·ªß y·∫øu ƒë·ªÉ l·∫•y n∆∞·ªõc d√πng trong, ng·ªçt t·ª´ x∆∞∆°ng/rau.",
                    basePrice = BigDecimal("4800.00")
                ),
                CookingMethod(
                    name = "Rang",
                    note = "D√πng √≠t d·∫ßu ho·∫∑c mu·ªëi ƒë·ªÉ t·∫°o h∆∞∆°ng v·ªã th∆°m ƒë·∫∑c tr∆∞ng.",
                    basePrice = BigDecimal("2000.00")
                ),
                CookingMethod(
                    name = "Mu·ªëi chua/Ng√¢m",
                    note = "D√πng l√™n men t·ª± nhi√™n ho·∫∑c ng√¢m gia v·ªã ƒë·ªÉ b·∫£o qu·∫£n th·ª±c ph·∫©m.",
                    basePrice = BigDecimal("1500.00")
                ),
                CookingMethod(
                    name = "Kh√¥ng",
                    note = "Gi·ªØ nguy√™n tr·∫°ng th√°i t∆∞∆°i s·ªëng c·ªßa th·ª±c ph·∫©m.",
                    basePrice = BigDecimal("0.00")
                )
            )
            
            val savedMethods = cookingMethodRepository.saveAll(cookingMethods)
            println("‚úÖ Inserted ${savedMethods.size} cooking methods")

            if (cookingEffectRepository.count() < 1L) {
                // ===== COOKING EFFECTS ======
                
                val effects = listOf(
                    // Lu·ªôc (id = 1)
                    CookingEffect(method=savedMethods[0], nutrientId=16L, effectType=EffectType.DECREASE, value=20, description="Lu·ªôc l√†m gi·∫£m ~20% Vitamin C tan trong n∆∞·ªõc"),
                    CookingEffect(method=savedMethods[0], nutrientId=8L, effectType=EffectType.DECREASE, value=15, description="Kho√°ng ch·∫•t Kali tan trong n∆∞·ªõc gi·∫£m"),
                    CookingEffect(method=savedMethods[0], nutrientId=5L, effectType=EffectType.DECREASE, value=10, description="Lu·ªôc l√†m rau m·ªÅm, hao h·ª•t ch·∫•t x∆° nh·∫π"),

                    // Chi√™n (id = 2)
                    CookingEffect(method=savedMethods[1], nutrientId=4L, effectType=EffectType.INCREASE, value=30, description="Chi√™n tƒÉng h√†m l∆∞·ª£ng ch·∫•t b√©o ~30%"),
                    CookingEffect(method=savedMethods[1], nutrientId=1L, effectType=EffectType.INCREASE, value=25, description="Chi√™n l√†m tƒÉng calo t·ªïng th·ªÉ do d·∫ßu"),
                    CookingEffect(method=savedMethods[1], nutrientId=16L, effectType=EffectType.DECREASE, value=15, description="Vitamin C d·ªÖ ph√¢n h·ªßy ·ªü nhi·ªát ƒë·ªô cao khi chi√™n"),

                    // N∆∞·ªõng (id = 3)
                    CookingEffect(method=savedMethods[2], nutrientId=4L, effectType=EffectType.DECREASE, value=10, description="N∆∞·ªõng gi√∫p gi·∫£m m·ªôt ph·∫ßn ch·∫•t b√©o ch·∫£y ra ngo√†i"),
                    CookingEffect(method=savedMethods[2], nutrientId=1L, effectType=EffectType.DECREASE, value=5,  description="L∆∞·ª£ng calo gi·∫£m nh·∫π nh·ªù m·∫•t ch·∫•t b√©o"),
                    CookingEffect(method=savedMethods[2], nutrientId=11L, effectType=EffectType.DECREASE, value=20, description="Vitamin A gi·∫£m do nhi·ªát ƒë·ªô cao"),

                    // H·∫•p (id = 4)
                    CookingEffect(method=savedMethods[3], nutrientId=16L, effectType=EffectType.DECREASE, value=5, description="H·∫•p l√†m hao h·ª•t r·∫•t √≠t vitamin C"),
                    CookingEffect(method=savedMethods[3], nutrientId=8L, effectType=EffectType.DECREASE, value=5, description="Kho√°ng ch·∫•t Kali gi·∫£m nh·∫π do h∆°i n∆∞·ªõc"),

                    // X√†o (id = 5)
                    CookingEffect(method=savedMethods[4], nutrientId=16L, effectType=EffectType.DECREASE, value=10, description="X√†o l√†m m·∫•t m·ªôt ph·∫ßn vitamin C"),
                    CookingEffect(method=savedMethods[4], nutrientId=4L, effectType=EffectType.INCREASE, value=15, description="D·∫ßu ƒÉn b·ªï sung th√™m ch·∫•t b√©o"),
                    CookingEffect(method=savedMethods[4], nutrientId=1L, effectType=EffectType.INCREASE, value=10, description="Calo tƒÉng nh·∫π khi x√†o"),

                    // Kho (id = 6)
                    CookingEffect(method=savedMethods[5], nutrientId=7L, effectType=EffectType.INCREASE, value=20, description="Kho v·ªõi n∆∞·ªõc m·∫Øm l√†m tƒÉng l∆∞·ª£ng Natri"),
                    CookingEffect(method=savedMethods[5], nutrientId=6L, effectType=EffectType.INCREASE, value=15, description="ƒê∆∞·ªùng v√† gia v·ªã l√†m tƒÉng ƒë∆∞·ªùng t·ªïng th·ªÉ"),
                    CookingEffect(method=savedMethods[5], nutrientId=2L, effectType=EffectType.DECREASE, value=5, description="Protein hao h·ª•t nh·∫π do n·∫•u l√¢u"),

                    // H·∫ßm (id = 7)
                    CookingEffect(method=savedMethods[6], nutrientId=9L, effectType=EffectType.INCREASE, value=30, description="H·∫ßm gi√∫p canxi v√† kho√°ng ch·∫•t tan v√†o n∆∞·ªõc"),
                    CookingEffect(method=savedMethods[6], nutrientId=20L, effectType=EffectType.INCREASE, value=25, description="Magie v√† vi ch·∫•t trong x∆∞∆°ng tan ra"),
                    CookingEffect(method=savedMethods[6], nutrientId=16L, effectType=EffectType.DECREASE, value=10, description="Vitamin C gi·∫£m khi n·∫•u l√¢u"),

                    // Ninh (id = 8)
                    CookingEffect(method=savedMethods[7], nutrientId=9L, effectType=EffectType.INCREASE, value=35, description="Ninh l·∫•y n∆∞·ªõc d√πng gi√†u canxi"),
                    CookingEffect(method=savedMethods[7], nutrientId=10L, effectType=EffectType.INCREASE, value=10, description="S·∫Øt t·ª´ x∆∞∆°ng/rau c·ªß tan ra n∆∞·ªõc"),
                    CookingEffect(method=savedMethods[7], nutrientId=2L, effectType=EffectType.DECREASE, value=8, description="Protein b·ªã ph√¢n h·ªßy nh·∫π khi ninh l√¢u"),

                    // Rang (id = 9)
                    CookingEffect(method=savedMethods[8], nutrientId=16L, effectType=EffectType.DECREASE, value=12, description="Rang l√†m m·∫•t m·ªôt √≠t vitamin C"),
                    CookingEffect(method=savedMethods[8], nutrientId=11L, effectType=EffectType.DECREASE, value=15, description="Vitamin A hao h·ª•t do nhi·ªát kh√¥"),
                    CookingEffect(method=savedMethods[8], nutrientId=1L, effectType=EffectType.INCREASE, value=5, description="Calo tƒÉng nh·∫π khi rang kh√¥"),

                    // Mu·ªëi chua/Ng√¢m (id = 10)
                    CookingEffect(method=savedMethods[9], nutrientId=16L, effectType=EffectType.DECREASE, value=25, description="Mu·ªëi chua l√†m hao h·ª•t vitamin C"),
                    CookingEffect(method=savedMethods[9], nutrientId=7L, effectType=EffectType.INCREASE, value=40, description="TƒÉng natri do mu·ªëi"),
                    CookingEffect(method=savedMethods[9], nutrientId=5L, effectType=EffectType.INCREASE, value=10, description="Qu√° tr√¨nh l√™n men t·∫°o th√™m ch·∫•t x∆° h√≤a tan"),
                )

                cookingEffectRepository.saveAll(effects)
                println("‚úÖ Inserted ${effects.size} cooking effects")
            }
        
        }

        

        

        // // ===== RECIPES =====
        // val recipes = listOf(
        //     Recipe(
        //         name = "C∆°m g√† lu·ªôc",
        //         description = "C∆°m tr·∫Øng ƒÉn k√®m th·ªãt g√† lu·ªôc v√† rau mu·ªëng.",
        //         isCustomizable = false,
        //         basePrice = BigDecimal("35000"),
        //         baseCal = 500,
        //         category = RecipeCategory.MAIN,
        //         isActive = true
        //     ),
        //     Recipe(
        //         name = "C∆°m b√≤ x√†o",
        //         description = "C∆°m g·∫°o l·ª©t v·ªõi th·ªãt b√≤ x√†o c√† r·ªët v√† d∆∞a leo.",
        //         isCustomizable = false,
        //         basePrice = BigDecimal("45000"),
        //         baseCal = 600,
        //         category = RecipeCategory.MAIN,
        //         isActive = true
        //     ),
        //     Recipe(
        //         name = "M√¨ tr·ª©ng h·∫£i s·∫£n",
        //         description = "M√¨ tr·ª©ng ƒÉn k√®m t√¥m s√∫, m·ª±c ·ªëng v√† c√† chua.",
        //         isCustomizable = true,
        //         basePrice = BigDecimal("50000"),
        //         baseCal = 650,
        //         category = RecipeCategory.MAIN,
        //         isActive = true
        //     ),
        //     Recipe(
        //         name = "B√°nh m√¨ th·ªãt b√≤ n∆∞·ªõng",
        //         description = "·ªî b√°nh m√¨ k·∫πp th·ªãt b√≤ n∆∞·ªõng, d∆∞a leo v√† c√† chua.",
        //         isCustomizable = true,
        //         basePrice = BigDecimal("40000"),
        //         baseCal = 550,
        //         category = RecipeCategory.SNACK,
        //         isActive = true
        //     ),
        //     Recipe(
        //         name = "Salad rau c·ªß tr·ªôn",
        //         description = "Rau mu·ªëng, c√† r·ªët, c√† chua, d∆∞a leo tr·ªôn d·∫ßu gi·∫•m.",
        //         isCustomizable = true,
        //         basePrice = BigDecimal("30000"),
        //         baseCal = 200,
        //         category = RecipeCategory.SNACK,
        //         isActive = true
        //     ),
        //     Recipe(
        //         name = "C∆°m c√° h·ªìi h·∫•p",
        //         description = "C∆°m tr·∫Øng ƒÉn k√®m c√° h·ªìi h·∫•p v√† c√† r·ªët.",
        //         isCustomizable = false,
        //         basePrice = BigDecimal("60000"),
        //         baseCal = 550,
        //         category = RecipeCategory.MAIN,
        //         isActive = true
        //     ),
        //     Recipe(
        //         name = "C∆°m s∆∞·ªùn heo kho",
        //         description = "C∆°m g·∫°o l·ª©t v·ªõi th·ªãt heo kho, k√®m rau mu·ªëng.",
        //         isCustomizable = false,
        //         basePrice = BigDecimal("50000"),
        //         baseCal = 650,
        //         category = RecipeCategory.MAIN,
        //         isActive = true
        //     ),
        //     Recipe(
        //         name = "B√∫n b√≤ x√†o",
        //         description = "B√∫n t∆∞∆°i v·ªõi th·ªãt b√≤ x√†o khoai t√¢y v√† c√† r·ªët.",
        //         isCustomizable = false,
        //         basePrice = BigDecimal("45000"),
        //         baseCal = 580,
        //         category = RecipeCategory.MAIN,
        //         isActive = true
        //     ),
        //     Recipe(
        //         name = "M·ª±c n∆∞·ªõng c∆°m tr·∫Øng",
        //         description = "M·ª±c ·ªëng n∆∞·ªõng ƒÉn k√®m c∆°m tr·∫Øng v√† rau mu·ªëng.",
        //         isCustomizable = true,
        //         basePrice = BigDecimal("55000"),
        //         baseCal = 500,
        //         category = RecipeCategory.MAIN,
        //         isActive = true
        //     ),
        //     Recipe(
        //         name = "Gh·∫π rang me",
        //         description = "Gh·∫π bi·ªÉn rang me ƒÉn k√®m c∆°m tr·∫Øng.",
        //         isCustomizable = false,
        //         basePrice = BigDecimal("65000"),
        //         baseCal = 700,
        //         category = RecipeCategory.MAIN,
        //         isActive = true
        //     ),
        //     Recipe(
        //         name = "C∆°m g√† chi√™n m·∫Øm",
        //         description = "C∆°m g·∫°o l·ª©t v·ªõi g√† chi√™n m·∫Øm, k√®m d∆∞a leo.",
        //         isCustomizable = false,
        //         basePrice = BigDecimal("52000"),
        //         baseCal = 680,
        //         category = RecipeCategory.MAIN,
        //         isActive = true
        //     ),
        //     Recipe(
        //         name = "M√¨ tr·ª©ng th·ªãt heo x√†o",
        //         description = "M√¨ tr·ª©ng x√†o th·ªãt heo v√† c√† chua.",
        //         isCustomizable = true,
        //         basePrice = BigDecimal("40000"),
        //         baseCal = 520,
        //         category = RecipeCategory.MAIN,
        //         isActive = true
        //     ),
        //     Recipe(
        //         name = "C∆°m b√≤ n∆∞·ªõng rau c·ªß",
        //         description = "C∆°m tr·∫Øng ƒÉn k√®m th·ªãt b√≤ n∆∞·ªõng, c√† r·ªët, khoai t√¢y.",
        //         isCustomizable = false,
        //         basePrice = BigDecimal("60000"),
        //         baseCal = 700,
        //         category = RecipeCategory.MAIN,
        //         isActive = true
        //     ),
        //     Recipe(
        //         name = "Salad h·∫£i s·∫£n",
        //         description = "Rau c·ªß tr·ªôn c√πng t√¥m s√∫, m·ª±c v√† c√† chua.",
        //         isCustomizable = true,
        //         basePrice = BigDecimal("55000"),
        //         baseCal = 400,
        //         category = RecipeCategory.SNACK,
        //         isActive = true
        //     ),
        //     Recipe(
        //         name = "C∆°m d√™ h·∫•p",
        //         description = "C∆°m g·∫°o l·ª©t ƒÉn k√®m th·ªãt d√™ h·∫•p.",
        //         isCustomizable = false,
        //         basePrice = BigDecimal("58000"),
        //         baseCal = 620,
        //         category = RecipeCategory.MAIN,
        //         isActive = true
        //     ),
        //     Recipe(
        //         name = "B√°nh m√¨ ·ªëp la b√≤",
        //         description = "B√°nh m√¨ k·∫πp th·ªãt b√≤ v√† tr·ª©ng ·ªëp la.",
        //         isCustomizable = true,
        //         basePrice = BigDecimal("45000"),
        //         baseCal = 500,
        //         category = RecipeCategory.SNACK,
        //         isActive = true
        //     ),
        //     Recipe(
        //         name = "C∆°m v·ªãt kho g·ª´ng",
        //         description = "C∆°m tr·∫Øng ƒÉn v·ªõi th·ªãt v·ªãt kho g·ª´ng.",
        //         isCustomizable = false,
        //         basePrice = BigDecimal("55000"),
        //         baseCal = 650,
        //         category = RecipeCategory.MAIN,
        //         isActive = true
        //     ),
        //     Recipe(
        //         name = "B√∫n th·ªãt g√† x√†o",
        //         description = "B√∫n t∆∞∆°i x√†o th·ªãt g√† v√† rau mu·ªëng.",
        //         isCustomizable = true,
        //         basePrice = BigDecimal("45000"),
        //         baseCal = 520,
        //         category = RecipeCategory.MAIN,
        //         isActive = true
        //     ),
        //     Recipe(
        //         name = "M√¨ tr·ª©ng c√° thu chi√™n",
        //         description = "M√¨ tr·ª©ng ƒÉn k√®m c√° thu chi√™n v√† c√† chua.",
        //         isCustomizable = true,
        //         basePrice = BigDecimal("50000"),
        //         baseCal = 600,
        //         category = RecipeCategory.MAIN,
        //         isActive = true
        //     ),
        //     Recipe(
        //         name = "C∆°m g√† x√†o rau c·ªß",
        //         description = "C∆°m tr·∫Øng x√†o g√† v·ªõi c√† r·ªët v√† khoai t√¢y.",
        //         isCustomizable = true,
        //         basePrice = BigDecimal("48000"),
        //         baseCal = 550,
        //         category = RecipeCategory.MAIN,
        //         isActive = true 
        //     )
        // )

        // val savedRecipes = recipeRepository.saveAll(recipes)
        // println("‚úÖ Inserted ${savedRecipes.size} recipes")

        // // ===== RECIPE INGREDIENTS =====
        // val recipeIngredients = listOf(
        //     // 1. C∆°m g√† lu·ªôc
        //     RecipeIngredient(recipe = savedRecipes[0], ingredient = ingMap["C∆°m tr·∫Øng"]!!, quantity = 150, cookingMethod = savedMethods[0]), // c∆°m lu·ªôc
        //     RecipeIngredient(recipe = savedRecipes[0], ingredient = ingMap["Th·ªãt g√†"]!!, quantity = 120, cookingMethod = savedMethods[0]),   // g√† lu·ªôc
        //     RecipeIngredient(recipe = savedRecipes[0], ingredient = ingMap["Rau mu·ªëng"]!!, quantity = 80, cookingMethod = savedMethods[0]),

        //     // 2. C∆°m b√≤ x√†o
        //     RecipeIngredient(recipe = savedRecipes[1], ingredient = ingMap["C∆°m g·∫°o l·ª©t"]!!, quantity = 150, cookingMethod = savedMethods[4]),
        //     RecipeIngredient(recipe = savedRecipes[1], ingredient = ingMap["Th·ªãt b√≤"]!!, quantity = 100, cookingMethod = savedMethods[4]),
        //     RecipeIngredient(recipe = savedRecipes[1], ingredient = ingMap["C√† r·ªët"]!!, quantity = 50, cookingMethod = savedMethods[4]),
        //     RecipeIngredient(recipe = savedRecipes[1], ingredient = ingMap["D∆∞a leo"]!!, quantity = 40, cookingMethod = savedMethods[4]),

        //     // 3. M√¨ tr·ª©ng h·∫£i s·∫£n
        //     RecipeIngredient(recipe = savedRecipes[2], ingredient = ingMap["M√¨ tr·ª©ng"]!!, quantity = 120, cookingMethod = savedMethods[4]),
        //     RecipeIngredient(recipe = savedRecipes[2], ingredient = ingMap["T√¥m s√∫"]!!, quantity = 80, cookingMethod = savedMethods[1]),
        //     RecipeIngredient(recipe = savedRecipes[2], ingredient = ingMap["M·ª±c ·ªëng"]!!, quantity = 80, cookingMethod = savedMethods[2]),
        //     RecipeIngredient(recipe = savedRecipes[2], ingredient = ingMap["C√† chua"]!!, quantity = 40, cookingMethod = savedMethods[0]),

        //     // 4. B√°nh m√¨ th·ªãt b√≤ n∆∞·ªõng
        //     RecipeIngredient(recipe = savedRecipes[3], ingredient = ingMap["B√°nh m√¨"]!!, quantity = 100, cookingMethod = savedMethods[10]), // kh√¥ng n·∫•u
        //     RecipeIngredient(recipe = savedRecipes[3], ingredient = ingMap["Th·ªãt b√≤"]!!, quantity = 120, cookingMethod = savedMethods[2]),
        //     RecipeIngredient(recipe = savedRecipes[3], ingredient = ingMap["D∆∞a leo"]!!, quantity = 30, cookingMethod = savedMethods[10]),
        //     RecipeIngredient(recipe = savedRecipes[3], ingredient = ingMap["C√† chua"]!!, quantity = 30, cookingMethod = savedMethods[10]),

        //     // 5. Salad rau c·ªß tr·ªôn
        //     RecipeIngredient(recipe = savedRecipes[4], ingredient = ingMap["Rau mu·ªëng"]!!, quantity = 60, cookingMethod = savedMethods[10]),
        //     RecipeIngredient(recipe = savedRecipes[4], ingredient = ingMap["C√† r·ªët"]!!, quantity = 40, cookingMethod = savedMethods[10]),
        //     RecipeIngredient(recipe = savedRecipes[4], ingredient = ingMap["C√† chua"]!!, quantity = 40, cookingMethod = savedMethods[10]),
        //     RecipeIngredient(recipe = savedRecipes[4], ingredient = ingMap["D∆∞a leo"]!!, quantity = 40, cookingMethod = savedMethods[10]),

        //     // 6. C∆°m c√° h·ªìi h·∫•p
        //     RecipeIngredient(recipe = savedRecipes[5], ingredient = ingMap["C∆°m tr·∫Øng"]!!, quantity = 150, cookingMethod = savedMethods[0]),
        //     RecipeIngredient(recipe = savedRecipes[5], ingredient = ingMap["C√° h·ªìi"]!!, quantity = 120, cookingMethod = savedMethods[3]),
        //     RecipeIngredient(recipe = savedRecipes[5], ingredient = ingMap["C√† r·ªët"]!!, quantity = 60, cookingMethod = savedMethods[3]),

        //     // 7. C∆°m s∆∞·ªùn heo kho
        //     RecipeIngredient(recipe = savedRecipes[6], ingredient = ingMap["C∆°m g·∫°o l·ª©t"]!!, quantity = 150, cookingMethod = savedMethods[0]),
        //     RecipeIngredient(recipe = savedRecipes[6], ingredient = ingMap["Th·ªãt heo"]!!, quantity = 120, cookingMethod = savedMethods[5]),
        //     RecipeIngredient(recipe = savedRecipes[6], ingredient = ingMap["Rau mu·ªëng"]!!, quantity = 70, cookingMethod = savedMethods[0]),

        //     // 8. B√∫n b√≤ x√†o
        //     RecipeIngredient(recipe = savedRecipes[7], ingredient = ingMap["B√∫n t∆∞∆°i"]!!, quantity = 150, cookingMethod = savedMethods[4]),
        //     RecipeIngredient(recipe = savedRecipes[7], ingredient = ingMap["Th·ªãt b√≤"]!!, quantity = 100, cookingMethod = savedMethods[4]),
        //     RecipeIngredient(recipe = savedRecipes[7], ingredient = ingMap["Khoai t√¢y"]!!, quantity = 60, cookingMethod = savedMethods[4]),
        //     RecipeIngredient(recipe = savedRecipes[7], ingredient = ingMap["C√† r·ªët"]!!, quantity = 50, cookingMethod = savedMethods[4]),

        //     // 9. M·ª±c n∆∞·ªõng c∆°m tr·∫Øng
        //     RecipeIngredient(recipe = savedRecipes[8], ingredient = ingMap["C∆°m tr·∫Øng"]!!, quantity = 150, cookingMethod = savedMethods[0]),
        //     RecipeIngredient(recipe = savedRecipes[8], ingredient = ingMap["M·ª±c ·ªëng"]!!, quantity = 100, cookingMethod = savedMethods[2]),
        //     RecipeIngredient(recipe = savedRecipes[8], ingredient = ingMap["Rau mu·ªëng"]!!, quantity = 70, cookingMethod = savedMethods[0]),

        //     // 10. Gh·∫π rang me
        //     RecipeIngredient(recipe = savedRecipes[9], ingredient = ingMap["Gh·∫π bi·ªÉn"]!!, quantity = 150, cookingMethod = savedMethods[8]),
        //     RecipeIngredient(recipe = savedRecipes[9], ingredient = ingMap["C∆°m tr·∫Øng"]!!, quantity = 150, cookingMethod = savedMethods[0]),

        //     // 11. C∆°m g√† chi√™n m·∫Øm
        //     RecipeIngredient(recipe = savedRecipes[10], ingredient = ingMap["C∆°m g·∫°o l·ª©t"]!!, quantity = 150, cookingMethod = savedMethods[0]),
        //     RecipeIngredient(recipe = savedRecipes[10], ingredient = ingMap["Th·ªãt g√†"]!!, quantity = 120, cookingMethod = savedMethods[1]),
        //     RecipeIngredient(recipe = savedRecipes[10], ingredient = ingMap["D∆∞a leo"]!!, quantity = 40, cookingMethod = savedMethods[10]),

        //     // 12. M√¨ tr·ª©ng th·ªãt heo x√†o
        //     RecipeIngredient(recipe = savedRecipes[11], ingredient = ingMap["M√¨ tr·ª©ng"]!!, quantity = 150, cookingMethod = savedMethods[4]),
        //     RecipeIngredient(recipe = savedRecipes[11], ingredient = ingMap["Th·ªãt heo"]!!, quantity = 100, cookingMethod = savedMethods[4]),
        //     RecipeIngredient(recipe = savedRecipes[11], ingredient = ingMap["C√† chua"]!!, quantity = 40, cookingMethod = savedMethods[0]),

        //     // 13. C∆°m b√≤ n∆∞·ªõng rau c·ªß
        //     RecipeIngredient(recipe = savedRecipes[12], ingredient = ingMap["C∆°m tr·∫Øng"]!!, quantity = 150, cookingMethod = savedMethods[0]),
        //     RecipeIngredient(recipe = savedRecipes[12], ingredient = ingMap["Th·ªãt b√≤"]!!, quantity = 120, cookingMethod = savedMethods[2]),
        //     RecipeIngredient(recipe = savedRecipes[12], ingredient = ingMap["C√† r·ªët"]!!, quantity = 50, cookingMethod = savedMethods[3]),
        //     RecipeIngredient(recipe = savedRecipes[12], ingredient = ingMap["Khoai t√¢y"]!!, quantity = 60, cookingMethod = savedMethods[3]),

        //     // 14. Salad h·∫£i s·∫£n
        //     RecipeIngredient(recipe = savedRecipes[13], ingredient = ingMap["T√¥m s√∫"]!!, quantity = 70, cookingMethod = savedMethods[3]),
        //     RecipeIngredient(recipe = savedRecipes[13], ingredient = ingMap["M·ª±c ·ªëng"]!!, quantity = 70, cookingMethod = savedMethods[3]),
        //     RecipeIngredient(recipe = savedRecipes[13], ingredient = ingMap["C√† chua"]!!, quantity = 40, cookingMethod = savedMethods[10]),
        //     RecipeIngredient(recipe = savedRecipes[13], ingredient = ingMap["D∆∞a leo"]!!, quantity = 40, cookingMethod = savedMethods[10]),

        //     // 15. C∆°m d√™ h·∫•p
        //     RecipeIngredient(recipe = savedRecipes[14], ingredient = ingMap["C∆°m g·∫°o l·ª©t"]!!, quantity = 150, cookingMethod = savedMethods[0]),
        //     RecipeIngredient(recipe = savedRecipes[14], ingredient = ingMap["Th·ªãt d√™"]!!, quantity = 120, cookingMethod = savedMethods[3]),

        //     // 16. B√°nh m√¨ ·ªëp la b√≤
        //     RecipeIngredient(recipe = savedRecipes[15], ingredient = ingMap["B√°nh m√¨"]!!, quantity = 100, cookingMethod = savedMethods[10]),
        //     RecipeIngredient(recipe = savedRecipes[15], ingredient = ingMap["Th·ªãt b√≤"]!!, quantity = 100, cookingMethod = savedMethods[2]),
        //     RecipeIngredient(recipe = savedRecipes[15], ingredient = ingMap["M√¨ tr·ª©ng"]!!, quantity = 50, cookingMethod = savedMethods[6]),

        //     // 17. C∆°m v·ªãt kho g·ª´ng
        //     RecipeIngredient(recipe = savedRecipes[16], ingredient = ingMap["C∆°m tr·∫Øng"]!!, quantity = 150, cookingMethod = savedMethods[0]),
        //     RecipeIngredient(recipe = savedRecipes[16], ingredient = ingMap["Th·ªãt v·ªãt"]!!, quantity = 120, cookingMethod = savedMethods[5]),

        //     // 18. B√∫n th·ªãt g√† x√†o
        //     RecipeIngredient(recipe = savedRecipes[17], ingredient = ingMap["B√∫n t∆∞∆°i"]!!, quantity = 150, cookingMethod = savedMethods[4]),
        //     RecipeIngredient(recipe = savedRecipes[17], ingredient = ingMap["Th·ªãt g√†"]!!, quantity = 100, cookingMethod = savedMethods[4]),
        //     RecipeIngredient(recipe = savedRecipes[17], ingredient = ingMap["Rau mu·ªëng"]!!, quantity = 60, cookingMethod = savedMethods[4]),

        //     // 19. M√¨ tr·ª©ng c√° thu chi√™n
        //     RecipeIngredient(recipe = savedRecipes[18], ingredient = ingMap["M√¨ tr·ª©ng"]!!, quantity = 150, cookingMethod = savedMethods[4]),
        //     RecipeIngredient(recipe = savedRecipes[18], ingredient = ingMap["C√° thu"]!!, quantity =  100, cookingMethod = savedMethods[1]),
        //     RecipeIngredient(recipe = savedRecipes[18], ingredient = ingMap["C√† chua"]!!, quantity = 40, cookingMethod = savedMethods[0]),

        //     // 20. C∆°m g√† x√†o rau c·ªß
        //     RecipeIngredient(recipe = savedRecipes[19], ingredient = ingMap["C∆°m tr·∫Øng"]!!, quantity = 150, cookingMethod = savedMethods[0]),
        //     RecipeIngredient(recipe = savedRecipes[19], ingredient = ingMap["Th·ªãt g√†"]!!, quantity =  100, cookingMethod = savedMethods[4]),
        //     RecipeIngredient(recipe = savedRecipes[19], ingredient = ingMap["C√† r·ªët"]!!, quantity = 50, cookingMethod = savedMethods[4]),
        //     RecipeIngredient(recipe = savedRecipes[19], ingredient = ingMap["Khoai t√¢y"]!!, quantity = 60, cookingMethod = savedMethods[4])
        // )

        // recipeIngredientRepository.saveAll(recipeIngredients)
        // println("‚úÖ Inserted ${recipeIngredients.size} recipe_ingredients")

        println("‚úÖ Sample data initialized!")




    }
}
