package com.ChickenKitchen.app.serviceImpl.menu

import com.ChickenKitchen.app.handler.IngredientNotFoundException
import com.ChickenKitchen.app.mapper.toDailyMenuDetailResponse
import com.ChickenKitchen.app.mapper.toDailyMenuResponse
import com.ChickenKitchen.app.mapper.toDailyMenuResponseList
import com.ChickenKitchen.app.model.dto.request.CreateDailyMenuRequest
import com.ChickenKitchen.app.model.dto.request.AutoGenerateDailyMenuRequest
import com.ChickenKitchen.app.model.dto.request.DailyMenuItemRequest
import com.ChickenKitchen.app.model.dto.request.UpdateDailyMenuRequest
import com.ChickenKitchen.app.model.dto.response.DailyMenuDetailResponse
import com.ChickenKitchen.app.model.dto.response.DailyMenuResponse
import com.ChickenKitchen.app.model.entity.menu.DailyMenu
import com.ChickenKitchen.app.model.entity.menu.DailyMenuItem
import com.ChickenKitchen.app.repository.menu.DailyMenuItemRepository
import com.ChickenKitchen.app.repository.menu.DailyMenuRepository
import com.ChickenKitchen.app.repository.recipe.RecipeRepository
import com.ChickenKitchen.app.repository.combo.ComboRepository
import com.ChickenKitchen.app.service.menu.DailyMenuService
import org.springframework.stereotype.Service
import java.sql.Date
import java.time.LocalDate
import com.ChickenKitchen.app.enum.MenuType

@Service
class DailyMenuServiceImpl(
    private val dailyMenuRepository: DailyMenuRepository,
    private val dailyMenuItemRepository: DailyMenuItemRepository,
    private val recipeRepository: RecipeRepository,
    private val comboRepository: ComboRepository,
) : DailyMenuService {

    override fun getAll(): List<DailyMenuResponse>? {
        val list = dailyMenuRepository.findAll()
        if (list.isEmpty()) return null
        return list.toDailyMenuResponseList()
    }

    override fun getById(id: Long): DailyMenuDetailResponse {
        val dm = dailyMenuRepository.findById(id).orElse(null)
            ?: throw IngredientNotFoundException("DailyMenu with id $id not found")
        return dm.toDailyMenuDetailResponse()
    }

    override fun create(req: CreateDailyMenuRequest): DailyMenuDetailResponse {
        val dm = dailyMenuRepository.save(
            DailyMenu(
                date = req.date,
                name = req.name
            )
        )

        applyItems(dm, req.items)
        val saved = dailyMenuRepository.save(dm)
        return saved.toDailyMenuDetailResponse()
    }

    override fun update(id: Long, req: UpdateDailyMenuRequest): DailyMenuDetailResponse {
        val dm = dailyMenuRepository.findById(id).orElse(null)
            ?: throw IngredientNotFoundException("DailyMenu with id $id not found")

        req.date?.let { dm.date = it }
        req.name?.let { dm.name = it }
        req.items?.let { applyItems(dm, it) }

        val saved = dailyMenuRepository.save(dm)
        return saved.toDailyMenuDetailResponse()
    }

    override fun delete(id: Long) {
        val dm = dailyMenuRepository.findById(id).orElse(null)
            ?: throw IngredientNotFoundException("DailyMenu with id $id not found")
        dailyMenuRepository.delete(dm)
    }

    private fun applyItems(dm: DailyMenu, items: List<DailyMenuItemRequest>?) {
        if (items.isNullOrEmpty()) {
            dm.dailyMenuItems.clear()
            return
        }

        val newItems = items.map { reqItem ->
            DailyMenuItem(
                dailyMenu = dm,
                name = reqItem.name,
                menuType = reqItem.menuType,
                refId = reqItem.refId,
                cal = reqItem.cal,
                price = reqItem.price
            )
        }

        dm.dailyMenuItems.apply {
            clear()
            addAll(newItems)
        }
    }

    override fun autoGenerate(req: AutoGenerateDailyMenuRequest): List<DailyMenuResponse> {
        // Determine date range: default next 7 days starting tomorrow
        val today = LocalDate.now()
        val start: LocalDate = req.startDate?.toLocalDate() ?: today.plusDays(1)
        val end: LocalDate = req.endDate?.toLocalDate() ?: start.plusDays(6)

        if (end.isBefore(start)) return emptyList()

        val created = mutableListOf<DailyMenu>()

        // Load active recipes and combos once
        val allRecipes = recipeRepository.findAllByIsActive(true).filter { it.id != null }
        val allCombos = comboRepository.findAllByIsActive(true).filter { it.id != null }

        // Track previous day meal IDs to reduce overlap
        var prevMealIds: Set<Long> = emptySet()

        var cur = start
        while (!cur.isAfter(end)) {
            val sqlDate = Date.valueOf(cur)

            val existed = dailyMenuRepository.findByDate(sqlDate)
            if (existed.isPresent) {
                // Update prevMealIds based on existing menu to keep variety for the following day
                val meals = existed.get().dailyMenuItems.filter { it.menuType == MenuType.MEAL }
                prevMealIds = meals.map { it.refId }.toSet()
                cur = cur.plusDays(1)
                continue
            }

            // 1) Choose MEALs prioritizing recipes not used yesterday
            val notInPrev = allRecipes.filter { it.id!! !in prevMealIds }.shuffled()
            val inPrev = allRecipes.filter { it.id!! in prevMealIds }.shuffled()

            // Aim for 12 meals by default
            val meals = mutableListOf<com.ChickenKitchen.app.model.entity.recipe.Recipe>()
            meals.addAll(notInPrev.take(12))
            if (meals.size < 12) {
                meals.addAll(inPrev.take(12 - meals.size))
            }

            val mealIdSet = meals.map { it.id!! }.toSet()

            // 2) Choose COMBOs whose recipes are subset of today's meals
            val validCombos = allCombos.filter { combo ->
                combo.combo_items.all { it.recipe.id != null && it.recipe.id!! in mealIdSet }
            }.shuffled()
            val combosSelected = validCombos.take(4)

            // 3) Choose EXTRAs from today's meals
            val extrasSelected = meals.shuffled().take(4)

            // 4) Build item requests
            val itemReqs = mutableListOf<DailyMenuItemRequest>()

            // Meals
            itemReqs.addAll(meals.map { r ->
                DailyMenuItemRequest(
                    name = r.name,
                    menuType = MenuType.MEAL,
                    refId = r.id!!,
                    cal = r.cal,
                    price = r.price
                )
            })

            // Combos
            itemReqs.addAll(combosSelected.map { c ->
                DailyMenuItemRequest(
                    name = c.name,
                    menuType = MenuType.COMBO,
                    refId = c.id!!,
                    cal = c.cal,
                    price = c.price
                )
            })

            // Extras (use the same recipe info, marked as EXTRA)
            itemReqs.addAll(extrasSelected.map { r ->
                DailyMenuItemRequest(
                    name = r.name,
                    menuType = MenuType.EXTRA,
                    refId = r.id!!,
                    cal = r.cal,
                    price = r.price
                )
            })

            // Ensure at least 20 items by adding more meals if needed
            if (itemReqs.size < 20) {
                val alreadyMealIds = meals.map { it.id!! }.toMutableSet()
                val moreMeals = (allRecipes.shuffled()).filter { it.id!! !in alreadyMealIds }
                val needed = 20 - itemReqs.size
                moreMeals.take(needed).forEach { r ->
                    itemReqs.add(
                        DailyMenuItemRequest(
                            name = r.name,
                            menuType = MenuType.MEAL,
                            refId = r.id!!,
                            cal = r.cal,
                            price = r.price
                        )
                    )
                    alreadyMealIds.add(r.id!!)
                }
            }

            // Create and save the daily menu
            val dm = dailyMenuRepository.save(
                DailyMenu(
                    date = sqlDate,
                    name = "Daily Menu ${cur}",
                )
            )

            applyItems(dm, itemReqs)
            val saved = dailyMenuRepository.save(dm)
            created.add(saved)

            // Update prev set for next loop
            prevMealIds = mealIdSet
            cur = cur.plusDays(1)
        }

        return created.toDailyMenuResponseList()
    }
}
